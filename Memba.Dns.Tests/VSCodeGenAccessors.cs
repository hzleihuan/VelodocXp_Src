// ------------------------------------------------------------------------------
//<autogenerated>
//        This code was generated by Microsoft Visual Studio Team System 2005.
//
//        Changes to this file may cause incorrect behavior and will be lost if
//        the code is regenerated.
//</autogenerated>
//------------------------------------------------------------------------------
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Memba.Dns.Tests
{
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class BaseAccessor {
    
    protected Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject m_privateObject;
    
    protected BaseAccessor(object target, Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType type) {
        m_privateObject = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject(target, type);
    }
    
    protected BaseAccessor(Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType type) : 
            this(null, type) {
    }
    
    internal virtual object Target {
        get {
            return m_privateObject.Target;
        }
    }
    
    public override string ToString() {
        return this.Target.ToString();
    }
    
    public override bool Equals(object obj) {
        if (typeof(BaseAccessor).IsInstanceOfType(obj)) {
            obj = ((BaseAccessor)(obj)).Target;
        }
        return this.Target.Equals(obj);
    }
    
    public override int GetHashCode() {
        return this.Target.GetHashCode();
    }
}


[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class Memba_Dns_ResolverAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::Memba.Dns.Resolver));
    
    internal Memba_Dns_ResolverAccessor() : 
            base(m_privateType) {
    }
    
    internal static int DNSPORT {
        get {
            int ret = ((int)(m_privateType.GetStaticField("DNSPORT")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("DNSPORT", value);
        }
    }
    
    internal static int MAXRETRYATTEMPTS {
        get {
            int ret = ((int)(m_privateType.GetStaticField("MAXRETRYATTEMPTS")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("MAXRETRYATTEMPTS", value);
        }
    }
    
    internal static int TIMEOUT {
        get {
            int ret = ((int)(m_privateType.GetStaticField("TIMEOUT")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("TIMEOUT", value);
        }
    }
    
    internal static int MAXCACHESIZE {
        get {
            int ret = ((int)(m_privateType.GetStaticField("MAXCACHESIZE")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("MAXCACHESIZE", value);
        }
    }
    
    internal static int _UniqueId {
        get {
            int ret = ((int)(m_privateType.GetStaticField("_UniqueId")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("_UniqueId", value);
        }
    }
    
    internal static object _Lock {
        get {
            object ret = ((object)(m_privateType.GetStaticField("_Lock")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("_Lock", value);
        }
    }
    
    internal static byte[] UdpTransfer(global::System.Net.IPEndPoint server, byte[] requestMessage) {
        object[] args = new object[] {
                server,
                requestMessage};
        byte[] ret = ((byte[])(m_privateType.InvokeStatic("UdpTransfer", new System.Type[] {
                    typeof(global::System.Net.IPEndPoint),
                    typeof(byte).MakeArrayType()}, args)));
        return ret;
    }
    
    internal static global::System.Net.IPAddress[] GetDnsServers() {
        object[] args = new object[0];
        global::System.Net.IPAddress[] ret = ((global::System.Net.IPAddress[])(m_privateType.InvokeStatic("GetDnsServers", new System.Type[0], args)));
        return ret;
    }
}
}
