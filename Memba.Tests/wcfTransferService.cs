/*
 * Copyright © 2005-2008 Memba SA. All rights reserved.
 * 
 * This file is part of Memba Velodoc Outlook Add-in and Client API.
 * 
 * Memba Velodoc Outlook Add-in and Client API is open-source software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free Software Foundation,
 * either version 2 of the License, or (at your option) any later version.
 * 
 * Memba Velodoc Outlook Add-in and Client API is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along with Memba Velodoc Outlook Add-in and Client API.
 * If not, see <http://www.gnu.org/licenses/>.
 * 
 * For more information, please contact Memba at <http://www.memba.com>.
 * You can find more information about Velodoc at <http://www.velodoc.com> and <http://www.velodoc.com/help>.
 * You can try Velodoc online at <http://www.velodoc.net>.
 *
*/
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1434
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="http://schemas.memba.org/2006/files/webservices", ConfigurationName="ITransferService")]
public interface ITransferService
{
    
    // CODEGEN: Generating message contract since the wrapper name (RemoteFileDescriptor) of message RemoteFileDescriptor does not match the default value (Upload)
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://schemas.memba.org/2006/files/webservices/ITransferService/Upload")]
    void Upload(RemoteFileDescriptor request);
    
    // CODEGEN: Generating message contract since the wrapper name (RemoteFileIdentifier) of message RemoteFileIdentifier does not match the default value (Download)
    [System.ServiceModel.OperationContractAttribute(Action="http://schemas.memba.org/2006/files/webservices/ITransferService/Download", ReplyAction="http://schemas.memba.org/2006/files/webservices/ITransferService/DownloadResponse" +
        "")]
    RemoteFileDescriptor Download(RemoteFileIdentifier request);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://schemas.memba.org/2006/files/webservices/ITransferService/GetFileSize", ReplyAction="http://schemas.memba.org/2006/files/webservices/ITransferService/GetFileSizeRespo" +
        "nse")]
    long GetFileSize(System.Uri remoteFile);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://schemas.memba.org/2006/files/webservices/ITransferService/Authenticate", ReplyAction="http://schemas.memba.org/2006/files/webservices/ITransferService/AuthenticateResp" +
        "onse")]
    bool Authenticate(string email, string securityCode);
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
[System.ServiceModel.MessageContractAttribute(WrapperName="RemoteFileDescriptor", WrapperNamespace="http://schemas.memba.org/2006/files/webservices", IsWrapped=true)]
public partial class RemoteFileDescriptor
{
    
    [System.ServiceModel.MessageHeaderAttribute(Namespace="http://schemas.memba.org/2006/files/webservices")]
    public string ContentType;
    
    [System.ServiceModel.MessageHeaderAttribute(Namespace="http://schemas.memba.org/2006/files/webservices")]
    public string Email;
    
    [System.ServiceModel.MessageHeaderAttribute(Namespace="http://schemas.memba.org/2006/files/webservices")]
    public System.Guid FileGuid;
    
    [System.ServiceModel.MessageHeaderAttribute(Namespace="http://schemas.memba.org/2006/files/webservices")]
    public string FileName;
    
    [System.ServiceModel.MessageHeaderAttribute(Namespace="http://schemas.memba.org/2006/files/webservices")]
    public string HashCode;
    
    [System.ServiceModel.MessageHeaderAttribute(Namespace="http://schemas.memba.org/2006/files/webservices")]
    public long Length;
    
    [System.ServiceModel.MessageHeaderAttribute(Namespace="http://schemas.memba.org/2006/files/webservices")]
    public string SecurityCode;
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.memba.org/2006/files/webservices", Order=0)]
    public System.IO.Stream Stream;
    
    public RemoteFileDescriptor()
    {
    }
    
    public RemoteFileDescriptor(string ContentType, string Email, System.Guid FileGuid, string FileName, string HashCode, long Length, string SecurityCode, System.IO.Stream Stream)
    {
        this.ContentType = ContentType;
        this.Email = Email;
        this.FileGuid = FileGuid;
        this.FileName = FileName;
        this.HashCode = HashCode;
        this.Length = Length;
        this.SecurityCode = SecurityCode;
        this.Stream = Stream;
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
[System.ServiceModel.MessageContractAttribute(WrapperName="RemoteFileIdentifier", WrapperNamespace="http://schemas.memba.org/2006/files/webservices", IsWrapped=true)]
public partial class RemoteFileIdentifier
{
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.memba.org/2006/files/webservices", Order=0)]
    public System.Uri RemoteFile;
    
    public RemoteFileIdentifier()
    {
    }
    
    public RemoteFileIdentifier(System.Uri RemoteFile)
    {
        this.RemoteFile = RemoteFile;
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public interface ITransferServiceChannel : ITransferService, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public partial class TransferServiceClient : System.ServiceModel.ClientBase<ITransferService>, ITransferService
{
    
    public TransferServiceClient()
    {
    }
    
    public TransferServiceClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public TransferServiceClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public TransferServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public TransferServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    void ITransferService.Upload(RemoteFileDescriptor request)
    {
        base.Channel.Upload(request);
    }
    
    public void Upload(string ContentType, string Email, System.Guid FileGuid, string FileName, string HashCode, long Length, string SecurityCode, System.IO.Stream Stream)
    {
        RemoteFileDescriptor inValue = new RemoteFileDescriptor();
        inValue.ContentType = ContentType;
        inValue.Email = Email;
        inValue.FileGuid = FileGuid;
        inValue.FileName = FileName;
        inValue.HashCode = HashCode;
        inValue.Length = Length;
        inValue.SecurityCode = SecurityCode;
        inValue.Stream = Stream;
        ((ITransferService)(this)).Upload(inValue);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    RemoteFileDescriptor ITransferService.Download(RemoteFileIdentifier request)
    {
        return base.Channel.Download(request);
    }
    
    public string Download(System.Uri RemoteFile, out string Email, out System.Guid FileGuid, out string FileName, out string HashCode, out long Length, out string SecurityCode, out System.IO.Stream Stream)
    {
        RemoteFileIdentifier inValue = new RemoteFileIdentifier();
        inValue.RemoteFile = RemoteFile;
        RemoteFileDescriptor retVal = ((ITransferService)(this)).Download(inValue);
        Email = retVal.Email;
        FileGuid = retVal.FileGuid;
        FileName = retVal.FileName;
        HashCode = retVal.HashCode;
        Length = retVal.Length;
        SecurityCode = retVal.SecurityCode;
        Stream = retVal.Stream;
        return retVal.ContentType;
    }
    
    public long GetFileSize(System.Uri remoteFile)
    {
        return base.Channel.GetFileSize(remoteFile);
    }
    
    public bool Authenticate(string email, string securityCode)
    {
        return base.Channel.Authenticate(email, securityCode);
    }
}
