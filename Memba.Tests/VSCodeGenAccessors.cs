// ------------------------------------------------------------------------------
//<autogenerated>
//        This code was generated by Microsoft Visual Studio Team System 2005.
//
//        Changes to this file may cause incorrect behavior and will be lost if
//        the code is regenerated.
//</autogenerated>
//------------------------------------------------------------------------------
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Memba.Tests
{
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class BaseAccessor {
    
    protected Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject m_privateObject;
    
    protected BaseAccessor(object target, Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType type) {
        m_privateObject = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject(target, type);
    }
    
    protected BaseAccessor(Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType type) : 
            this(null, type) {
    }
    
    internal virtual object Target {
        get {
            return m_privateObject.Target;
        }
    }
    
    public override string ToString() {
        return this.Target.ToString();
    }
    
    public override bool Equals(object obj) {
        if (typeof(BaseAccessor).IsInstanceOfType(obj)) {
            obj = ((BaseAccessor)(obj)).Target;
        }
        return this.Target.Equals(obj);
    }
    
    public override int GetHashCode() {
        return this.Target.GetHashCode();
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class Memba_FileUpload_MimeParserAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("Memba.FileUpload.XP", "Memba.FileUpload.MimeParser");
    
    internal Memba_FileUpload_MimeParserAccessor(object target) : 
            base(target, m_privateType) {
    }
    
    internal global::Memba.Tests.Memba_FileUpload_RequestFilterAccessor _RequestFilter {
        get {
            object _ret_val = m_privateObject.GetField("_RequestFilter");
            global::Memba.Tests.Memba_FileUpload_RequestFilterAccessor _ret = null;
            if ((_ret_val != null)) {
                _ret = new global::Memba.Tests.Memba_FileUpload_RequestFilterAccessor(_ret_val);
            }
            global::Memba.Tests.Memba_FileUpload_RequestFilterAccessor ret = _ret;
            return ret;
        }
        set {
            m_privateObject.SetField("_RequestFilter", value);
        }
    }
    
    internal static object CreatePrivate(global::Memba.Tests.Memba_FileUpload_RequestFilterAccessor requestFilter) {
        object requestFilter_val_target = null;
        if ((requestFilter != null)) {
            requestFilter_val_target = requestFilter.Target;
        }
        object[] args = new object[] {
                requestFilter_val_target};
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType target = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("Memba.FileUpload.XP", "Memba.FileUpload.RequestFilter");
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("Memba.FileUpload.XP", "Memba.FileUpload.MimeParser", new System.Type[] {
                    target.ReferencedType}, args);
        return priv_obj.Target;
    }
    
    internal void Parse() {
        object[] args = new object[0];
        m_privateObject.Invoke("Parse", new System.Type[0], args);
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class Memba_FileUpload_RequestFilterAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("Memba.FileUpload.XP", "Memba.FileUpload.RequestFilter");
    
    internal Memba_FileUpload_RequestFilterAccessor(object target) : 
            base(target, m_privateType) {
    }
    
    internal global::System.IO.Stream _RequestStream {
        get {
            global::System.IO.Stream ret = ((global::System.IO.Stream)(m_privateObject.GetField("_RequestStream")));
            return ret;
        }
        set {
            m_privateObject.SetField("_RequestStream", value);
        }
    }
    
    internal global::System.Security.Cryptography.CryptoStream _CryptoStream {
        get {
            global::System.Security.Cryptography.CryptoStream ret = ((global::System.Security.Cryptography.CryptoStream)(m_privateObject.GetField("_CryptoStream")));
            return ret;
        }
        set {
            m_privateObject.SetField("_CryptoStream", value);
        }
    }
    
    internal global::System.Security.Cryptography.HashAlgorithm _HashAlgorithm {
        get {
            global::System.Security.Cryptography.HashAlgorithm ret = ((global::System.Security.Cryptography.HashAlgorithm)(m_privateObject.GetField("_HashAlgorithm")));
            return ret;
        }
        set {
            m_privateObject.SetField("_HashAlgorithm", value);
        }
    }
    
    internal global::System.Text.Encoding _Encoding {
        get {
            global::System.Text.Encoding ret = ((global::System.Text.Encoding)(m_privateObject.GetField("_Encoding")));
            return ret;
        }
        set {
            m_privateObject.SetField("_Encoding", value);
        }
    }
    
    internal byte[] _MultiPartBoundary {
        get {
            byte[] ret = ((byte[])(m_privateObject.GetField("_MultiPartBoundary")));
            return ret;
        }
        set {
            m_privateObject.SetField("_MultiPartBoundary", value);
        }
    }
    
    internal byte[] _MultiPartBoundary2 {
        get {
            byte[] ret = ((byte[])(m_privateObject.GetField("_MultiPartBoundary2")));
            return ret;
        }
        set {
            m_privateObject.SetField("_MultiPartBoundary2", value);
        }
    }
    
    internal global::System.Text.RegularExpressions.Regex _MultiPartRegex {
        get {
            global::System.Text.RegularExpressions.Regex ret = ((global::System.Text.RegularExpressions.Regex)(m_privateObject.GetField("_MultiPartRegex")));
            return ret;
        }
        set {
            m_privateObject.SetField("_MultiPartRegex", value);
        }
    }
    
    internal global::System.Text.StringBuilder _FilteredRequestStringBuilder {
        get {
            global::System.Text.StringBuilder ret = ((global::System.Text.StringBuilder)(m_privateObject.GetField("_FilteredRequestStringBuilder")));
            return ret;
        }
        set {
            m_privateObject.SetField("_FilteredRequestStringBuilder", value);
        }
    }
    
    internal bool _IsProcessingUploadedFile {
        get {
            bool ret = ((bool)(m_privateObject.GetField("_IsProcessingUploadedFile")));
            return ret;
        }
        set {
            m_privateObject.SetField("_IsProcessingUploadedFile", value);
        }
    }
    
    internal global::System.IO.Stream _CurrentStream {
        get {
            global::System.IO.Stream ret = ((global::System.IO.Stream)(m_privateObject.GetField("_CurrentStream")));
            return ret;
        }
        set {
            m_privateObject.SetField("_CurrentStream", value);
        }
    }
    
    internal global::Memba.FileUpload.UploadData _UploadData {
        get {
            global::Memba.FileUpload.UploadData ret = ((global::Memba.FileUpload.UploadData)(m_privateObject.GetField("_UploadData")));
            return ret;
        }
        set {
            m_privateObject.SetField("_UploadData", value);
        }
    }
    
    internal global::System.IO.Stream RequestStream {
        get {
            global::System.IO.Stream ret = ((global::System.IO.Stream)(m_privateObject.GetProperty("RequestStream")));
            return ret;
        }
    }
    
    internal global::System.Text.Encoding Encoding {
        get {
            global::System.Text.Encoding ret = ((global::System.Text.Encoding)(m_privateObject.GetProperty("Encoding")));
            return ret;
        }
    }
    
    internal byte[] MultiPartBoundary {
        get {
            byte[] ret = ((byte[])(m_privateObject.GetProperty("MultiPartBoundary")));
            return ret;
        }
    }
    
    internal byte[] MultiPartBoundary2 {
        get {
            byte[] ret = ((byte[])(m_privateObject.GetProperty("MultiPartBoundary2")));
            return ret;
        }
    }
    
    internal string FilteredRequest {
        get {
            string ret = ((string)(m_privateObject.GetProperty("FilteredRequest")));
            return ret;
        }
    }
    
    internal static object CreatePrivate(global::System.IO.Stream requestStream, global::System.Security.Cryptography.HashAlgorithm hashAlgorithm, long contentLength, global::System.Text.Encoding encoding, string multipartBoundary, global::Memba.FileUpload.UploadData uploadData) {
        object[] args = new object[] {
                requestStream,
                hashAlgorithm,
                contentLength,
                encoding,
                multipartBoundary,
                uploadData};
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("Memba.FileUpload.XP", "Memba.FileUpload.RequestFilter", new System.Type[] {
                    typeof(global::System.IO.Stream),
                    typeof(global::System.Security.Cryptography.HashAlgorithm),
                    typeof(long),
                    typeof(global::System.Text.Encoding),
                    typeof(string),
                    typeof(global::Memba.FileUpload.UploadData)}, args);
        return priv_obj.Target;
    }
    
    internal void Dispose() {
        object[] args = new object[0];
        m_privateObject.Invoke("Dispose", new System.Type[0], args);
    }
    
    internal void ProcessPartHeaders(string buffer) {
        object[] args = new object[] {
                buffer};
        m_privateObject.Invoke("ProcessPartHeaders", new System.Type[] {
                    typeof(string)}, args);
    }
    
    internal void ProcessPartData(ref byte[] buffer, int startIndex, int count) {
        object[] args = new object[] {
                buffer,
                startIndex,
                count};
        m_privateObject.Invoke("ProcessPartData", new System.Type[] {
                    typeof(byte).MakeArrayType().MakeByRefType(),
                    typeof(int),
                    typeof(int)}, args);
        buffer = ((byte[])(args[0]));
    }
    
    internal void ProcessEndOfPart() {
        object[] args = new object[0];
        m_privateObject.Invoke("ProcessEndOfPart", new System.Type[0], args);
    }
    
    internal void ProcessEndOfRequest() {
        object[] args = new object[0];
        m_privateObject.Invoke("ProcessEndOfRequest", new System.Type[0], args);
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class Memba_Install_WebInstallerAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::Memba.Install.WebInstaller));
    
    internal Memba_Install_WebInstallerAccessor(global::Memba.Install.WebInstaller target) : 
            base(target, m_privateType) {
    }
    
    internal static string W3SVC {
        get {
            string ret = ((string)(m_privateType.GetStaticField("W3SVC")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("W3SVC", value);
        }
    }
    
    internal static string METABASEROOT {
        get {
            string ret = ((string)(m_privateType.GetStaticField("METABASEROOT")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("METABASEROOT", value);
        }
    }
    
    internal static string BINDINGS {
        get {
            string ret = ((string)(m_privateType.GetStaticField("BINDINGS")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("BINDINGS", value);
        }
    }
    
    internal static int DEFAULTSITEID {
        get {
            int ret = ((int)(m_privateType.GetStaticField("DEFAULTSITEID")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("DEFAULTSITEID", value);
        }
    }
    
    internal static string REGMEMBAKEY {
        get {
            string ret = ((string)(m_privateType.GetStaticField("REGMEMBAKEY")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("REGMEMBAKEY", value);
        }
    }
    
    internal static string REGVELODOCKEY {
        get {
            string ret = ((string)(m_privateType.GetStaticField("REGVELODOCKEY")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("REGVELODOCKEY", value);
        }
    }
    
    internal static string REGLICKEY {
        get {
            string ret = ((string)(m_privateType.GetStaticField("REGLICKEY")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("REGLICKEY", value);
        }
    }
    
    internal static string REGLICUSR {
        get {
            string ret = ((string)(m_privateType.GetStaticField("REGLICUSR")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("REGLICUSR", value);
        }
    }
    
    internal static string REGLICORG {
        get {
            string ret = ((string)(m_privateType.GetStaticField("REGLICORG")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("REGLICORG", value);
        }
    }
    
    internal static string LICKEY {
        get {
            string ret = ((string)(m_privateType.GetStaticField("LICKEY")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("LICKEY", value);
        }
    }
    
    internal static string LICUSR {
        get {
            string ret = ((string)(m_privateType.GetStaticField("LICUSR")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("LICUSR", value);
        }
    }
    
    internal static string LICORG {
        get {
            string ret = ((string)(m_privateType.GetStaticField("LICORG")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("LICORG", value);
        }
    }
    
    internal static string STRDIR {
        get {
            string ret = ((string)(m_privateType.GetStaticField("STRDIR")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("STRDIR", value);
        }
    }
    
    internal static string SITE {
        get {
            string ret = ((string)(m_privateType.GetStaticField("SITE")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("SITE", value);
        }
    }
    
    internal static string VDIR {
        get {
            string ret = ((string)(m_privateType.GetStaticField("VDIR")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("VDIR", value);
        }
    }
    
    internal static string WEBSITEDIR {
        get {
            string ret = ((string)(m_privateType.GetStaticField("WEBSITEDIR")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("WEBSITEDIR", value);
        }
    }
    
    internal static string HOST {
        get {
            string ret = ((string)(m_privateType.GetStaticField("HOST")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("HOST", value);
        }
    }
    
    internal static string FROM {
        get {
            string ret = ((string)(m_privateType.GetStaticField("FROM")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("FROM", value);
        }
    }
    
    internal static string USER {
        get {
            string ret = ((string)(m_privateType.GetStaticField("USER")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("USER", value);
        }
    }
    
    internal static string PWD {
        get {
            string ret = ((string)(m_privateType.GetStaticField("PWD")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("PWD", value);
        }
    }
    
    internal static string LIST {
        get {
            string ret = ((string)(m_privateType.GetStaticField("LIST")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("LIST", value);
        }
    }
    
    internal static string CODE {
        get {
            string ret = ((string)(m_privateType.GetStaticField("CODE")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("CODE", value);
        }
    }
    
    internal static string SVCDIR {
        get {
            string ret = ((string)(m_privateType.GetStaticField("SVCDIR")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("SVCDIR", value);
        }
    }
    
    internal global::System.ComponentModel.IContainer components {
        get {
            global::System.ComponentModel.IContainer ret = ((global::System.ComponentModel.IContainer)(m_privateObject.GetField("components")));
            return ret;
        }
        set {
            m_privateObject.SetField("components", value);
        }
    }
    
    internal static void AddValueToRegistryKey(string name, string value) {
        object[] args = new object[] {
                name,
                value};
        m_privateType.InvokeStatic("AddValueToRegistryKey", new System.Type[] {
                    typeof(string),
                    typeof(string)}, args);
    }
    
    internal static void RemoveValueFromRegistryKey(string name) {
        object[] args = new object[] {
                name};
        m_privateType.InvokeStatic("RemoveValueFromRegistryKey", new System.Type[] {
                    typeof(string)}, args);
    }
    
    internal static void AddStoragePermissions(string storageDir) {
        object[] args = new object[] {
                storageDir};
        m_privateType.InvokeStatic("AddStoragePermissions", new System.Type[] {
                    typeof(string)}, args);
    }
    
    internal static void AddStoragePermissions(string identity, global::System.IO.DirectoryInfo di) {
        object[] args = new object[] {
                identity,
                di};
        m_privateType.InvokeStatic("AddStoragePermissions", new System.Type[] {
                    typeof(string),
                    typeof(global::System.IO.DirectoryInfo)}, args);
    }
    
    internal static void MapDatExtensionToAspNet(string virtualDir, string site) {
        object[] args = new object[] {
                virtualDir,
                site};
        m_privateType.InvokeStatic("MapDatExtensionToAspNet", new System.Type[] {
                    typeof(string),
                    typeof(string)}, args);
    }
    
    internal static void Switch404Page(string virtualDir, string site, string webInstallDir) {
        object[] args = new object[] {
                virtualDir,
                site,
                webInstallDir};
        m_privateType.InvokeStatic("Switch404Page", new System.Type[] {
                    typeof(string),
                    typeof(string),
                    typeof(string)}, args);
    }
    
    internal static void RegisterASPNET2(string virtualDir, string site) {
        object[] args = new object[] {
                virtualDir,
                site};
        m_privateType.InvokeStatic("RegisterASPNET2", new System.Type[] {
                    typeof(string),
                    typeof(string)}, args);
    }
    
    internal static string FindServerNum(string port) {
        object[] args = new object[] {
                port};
        string ret = ((string)(m_privateType.InvokeStatic("FindServerNum", new System.Type[] {
                    typeof(string)}, args)));
        return ret;
    }
    
    internal static void UpdateStorageConfig(string webInstallDir, string storageDir) {
        object[] args = new object[] {
                webInstallDir,
                storageDir};
        m_privateType.InvokeStatic("UpdateStorageConfig", new System.Type[] {
                    typeof(string),
                    typeof(string)}, args);
    }
    
    internal static void UpdateSmtpConfig(string webInstallDir, string host, string port, string from, string userName, string password, bool defaultCredentials) {
        object[] args = new object[] {
                webInstallDir,
                host,
                port,
                from,
                userName,
                password,
                defaultCredentials};
        m_privateType.InvokeStatic("UpdateSmtpConfig", new System.Type[] {
                    typeof(string),
                    typeof(string),
                    typeof(string),
                    typeof(string),
                    typeof(string),
                    typeof(string),
                    typeof(bool)}, args);
    }
    
    internal static void UpdateWebConfig(string webInstallDir, string userList, string securityCode) {
        object[] args = new object[] {
                webInstallDir,
                userList,
                securityCode};
        m_privateType.InvokeStatic("UpdateWebConfig", new System.Type[] {
                    typeof(string),
                    typeof(string),
                    typeof(string)}, args);
    }
    
    internal static void UpdateAppConfig(string svcInstallDir, string storageDir) {
        object[] args = new object[] {
                svcInstallDir,
                storageDir};
        m_privateType.InvokeStatic("UpdateAppConfig", new System.Type[] {
                    typeof(string),
                    typeof(string)}, args);
    }
    
    internal static void AddShortcuts(string site, string virtualDir) {
        object[] args = new object[] {
                site,
                virtualDir};
        m_privateType.InvokeStatic("AddShortcuts", new System.Type[] {
                    typeof(string),
                    typeof(string)}, args);
    }
    
    internal void Dispose(bool disposing) {
        object[] args = new object[] {
                disposing};
        m_privateObject.Invoke("Dispose", new System.Type[] {
                    typeof(bool)}, args);
    }
    
    internal void InitializeComponent() {
        object[] args = new object[0];
        m_privateObject.Invoke("InitializeComponent", new System.Type[0], args);
    }
}
}
